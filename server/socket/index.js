// server/socket/index.js

import { registerJoinRoom } from './joinRoom.js'

const roomsData = {} // L∆∞u th√¥ng tin t·∫°m v·ªÅ room

export function initSocket(io) {
  io.on('connection', (socket) => {
    console.log('üü¢ Client k·∫øt n·ªëi:', socket.id)

    // N·∫øu b·∫°n c√≥ logic ri√™ng cho join-room, d√πng handler n√†y
    registerJoinRoom(io, socket, roomsData)

    // === 1. Khi ng∆∞·ªùi ch∆°i tham gia ph√≤ng ===
    socket.on('join-room', ({ roomId, player }) => {
      socket.join(roomId)

      if (!roomsData[roomId]) {
        roomsData[roomId] = {
          players: [],
          questions: []
        }
      }

      const existed = roomsData[roomId].players.find(p => p.id === player.id)
      if (!existed) {
        roomsData[roomId].players.push(player)
      }

      io.to(roomId).emit('room-updated', {
        players: roomsData[roomId].players
      })
    })

    // === 2. Khi admin b·∫Øt ƒë·∫ßu game ===
    socket.on('start-game', ({ roomId, playerId, questions }) => {
      console.log(`üöÄ Game b·∫Øt ƒë·∫ßu t·∫°i ph√≤ng ${roomId}`)

      if (!roomsData[roomId]) {
        roomsData[roomId] = {
          players: [],
          questions: []
        }
      }

      roomsData[roomId].questions = questions || []

      io.to(roomId).emit('game-started', {
        questions: roomsData[roomId].questions
      })
    })

    // === 3. Khi client r·ªùi kh·ªèi (t·∫°m th·ªùi kh√¥ng x√≥a kh·ªèi ph√≤ng) ===
    socket.on('disconnect', () => {
      console.log('‚ùå Client r·ªùi k·∫øt n·ªëi:', socket.id)
    })
  })
}

export { roomsData } // n·∫øu c·∫ßn truy c·∫≠p t·ª´ file kh√°c
